Conheça Pedrinho!

Pedrinho é um desenvolvedor que está aprendendo a criar formulários dinâmicos usando Reactive Forms no Angular. Ele precisa criar um formulário de cadastro que inclua:

Tipo de Pessoa (Física ou Jurídica)
Nome
Email
CPF (para Pessoa Física)
CNPJ (para Pessoa Jurídica)
Estado Civil (para Pessoa Física)
Senha com regras de validação específicas:
Pelo menos 8 caracteres
Pelo menos uma letra maiúscula
Pelo menos uma letra minúscula
Pelo menos um número
Confirmação de Senha que deve coincidir com a senha
Desafio:

Pedrinho quer garantir que o formulário seja fácil de usar e intuitivo. Para isso, ele quer que os campos inválidos sejam destacados em vermelho quando o usuário tentar submeter o formulário sem preencher todos os campos corretamente.

Vamos ajudar o Pedrinho a criar esse formulário passo a passo!

formas de declarar o reactive forms:

forma 1:

this.form = new FormGroup({
    nome: new FormControl('', Validators.required),
    email: new FormControl('', [Validators.required, Validators.email]),
    senha: new FormControl('', Validators.required),
    confirmarSenha: new FormControl('', Validators.required)
});

forma 2:
this.form = this.formBuilder.group({
      nome: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      senha: ['', Validators.required],
      confirmarSenha: ['', Validators.required]
});

Quando Usar Cada Um:

FormGroup diretamente:

Útil para formulários simples.
Quando você deseja ter controle total sobre a criação e gerenciamento dos controles.
FormBuilder:

Ideal para formulários complexos.
Quando você deseja reduzir a verbosidade do código e aumentar a legibilidade.
Facilita a criação e gerenciamento de formulários dinâmicos.

______________________________________________________

Estrutura do html

<form [formGroup]="form" (ngSubmit)="onSubmit()">
    <div class="form-group mb-3">
      <label for="nome">Nome</label>
      <input 
        type="text" 
        class="form-control" 
        id="nome" 
        formControlName="nome" 
        [ngClass]="{'is-invalid': form.get('nome')?.invalid && form.get('nome')?.touched}">
      <div *ngIf="form.get('nome')?.invalid && form.get('nome')?.touched" class="invalid-feedback">
        Nome é obrigatório.
      </div>
    </div>
    <button type="submit" class="btn btn-primary">Enviar</button>
</form>

